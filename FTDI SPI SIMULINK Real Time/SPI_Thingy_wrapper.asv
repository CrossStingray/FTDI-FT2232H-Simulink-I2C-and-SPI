
/*
 * Include Files
 *
 */
#if defined(MATLAB_MEX_FILE)
#include "tmwtypes.h"
#include "simstruc_types.h"
#else
#define SIMPLIFIED_RTWTYPES_COMPATIBILITY
#include "rtwtypes.h"
#undef SIMPLIFIED_RTWTYPES_COMPATIBILITY
#endif



/* %%%-SFUNWIZ_wrapper_includes_Changes_BEGIN --- EDIT HERE TO _END */
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <windows.h>
#include "ftd2xx.h"
#include "libmpsse_spi.h"
#define MPU9265_SETUP_ACC_SCALE 28
#define MPU9265_SETUP_GYRO_SCALE 27
#define GYRO_FULL_SCALE_250_DPS 0x00
#define GYRO_FULL_SCALE_500_DPS 0x08
#define GYRO_FULL_SCALE_1000_DPS 0x10
#define GYRO_FULL_SCALE_2000_DPS 0x18
#define ACC_FULL_SCALE_2_G 0x00
#define ACC_FULL_SCALE_4_G 0x08
#define ACC_FULL_SCALE_8_G 0x10
#define ACC_FULL_SCALE_16_G 0x18
#define WHO_AM_I 0x75
#define WHO_AM_I_9250_ANS 0x71
#define GYRO_CONFIG 0x1B
#define ACCEL_CONFIG 0x1C

#define APP_CHECK_STATUS(exp) {if (exp!=FT_OK){printf(" status(0x%x) != FT_OK\n", exp);}else{;}};

extern void Init_libMPSSE(void);
extern FT_STATUS SPI_GetNumChannels(DWORD *numChannels);
extern FT_STATUS SPI_GetChannelInfo(DWORD index, FT_DEVICE_LIST_INFO_NODE *chanInfo);
extern FT_STATUS SPI_OpenChannel(DWORD index, FT_HANDLE *handle);
extern FT_STATUS SPI_InitChannel(FT_HANDLE handle, ChannelConfig *config);
extern FT_STATUS SPI_CloseChannel(FT_HANDLE handle);
extern FT_STATUS SPI_Write(FT_HANDLE handle, UCHAR *buffer, DWORD sizeToTransfer, LPDWORD sizeTransfered, DWORD options);
extern FT_STATUS SPI_Read(FT_HANDLE handle, UCHAR *buffer, DWORD sizeToTransfer, LPDWORD sizeTransfered, DWORD options);
extern void Cleanup_libMPSSE(void);

typedef void (*pInit_libMPSSE)(void);
typedef FT_STATUS (*pSPI_GetNumChannels)(DWORD);
typedef FT_STATUS (*pSPI_GetChannelInfo)(DWORD, FT_DEVICE_LIST_INFO_NODE*);
typedef FT_STATUS (*pSPI_OpenChannel)(DWORD, FT_HANDLE*);
typedef FT_STATUS (*pSPI_InitChannel)(FT_HANDLE, ChannelConfig*);
typedef FT_STATUS (*pSPI_CloseChannel)(FT_HANDLE);
typedef FT_STATUS (*pSPI_Write)(FT_HANDLE, UCHAR*, DWORD, LPDWORD, DWORD);
typedef FT_STATUS (*pSPI_Read)(FT_HANDLE, UCHAR*, DWORD, LPDWORD, DWORD);
typedef void (*pCleanup_libMPSSE)(void);

HINSTANCE hDLL;

FT_HANDLE ftHandle;

int Started = 0;

FT_STATUS spi_read(FT_HANDLE ftHandle, UCHAR reg, PUCHAR value)
{
    FT_STATUS status;
    DWORD xfer = 0;
    reg = (reg | (1 << 7)); // Sets a 1 on the MSB of the reg byte, it indicates a read operation on the MPU9250
    status = (*SPI_Write)(ftHandle, &reg, 1, &xfer,
                        SPI_TRANSFER_OPTIONS_SIZE_IN_BYTES |
                        SPI_TRANSFER_OPTIONS_CHIPSELECT_ENABLE
                       );
    if (status == FT_OK)
    {
        status = (*SPI_Read)(ftHandle, value, 1, &xfer,
                            SPI_TRANSFER_OPTIONS_SIZE_IN_BYTES |
                            SPI_TRANSFER_OPTIONS_CHIPSELECT_DISABLE
                          );
    }
    APP_CHECK_STATUS(status);
    return status;
}

FT_STATUS spi_write(FT_HANDLE ftHandle, UCHAR reg, UCHAR value)
{
    FT_STATUS status;
    DWORD xfer = 0;
    status = (*SPI_Write)(ftHandle, &reg, 1, &xfer,
                        SPI_TRANSFER_OPTIONS_SIZE_IN_BYTES |
                        SPI_TRANSFER_OPTIONS_CHIPSELECT_ENABLE
                       );
    APP_CHECK_STATUS(status);

    if (status == FT_OK)
    {
        /* Register address not sent on register write. */
        status = (*SPI_Write)(ftHandle, &value, 1, &xfer,
                            SPI_TRANSFER_OPTIONS_SIZE_IN_BYTES |
                            SPI_TRANSFER_OPTIONS_CHIPSELECT_DISABLE
                           );
        APP_CHECK_STATUS(status);
    }
    return status;
}
/* %%%-SFUNWIZ_wrapper_includes_Changes_END --- EDIT HERE TO _BEGIN */
#define u_width 1
#define y_width 1

/*
 * Create external references here.  
 *
 */
/* %%%-SFUNWIZ_wrapper_externs_Changes_BEGIN --- EDIT HERE TO _END */
/* extern double func(double a); */
/* %%%-SFUNWIZ_wrapper_externs_Changes_END --- EDIT HERE TO _BEGIN */

/*
 * Start function
 *
 */
void SPI_Thingy_Start_wrapper(void)
{
/* %%%-SFUNWIZ_wrapper_Start_Changes_BEGIN --- EDIT HERE TO _END */
/*
 * Custom Start code goes here.
 */
    hDLL = LoadLibrary("libmpsse.dll");

    pInit_libMPSSE = (void (*)(void)) GetProcAddress(hDLL, "Init_libMPSSE");
    pSPI_GetNumChannels = (FT_STATUS (*)(DWORD)) GetProcAddress(hDLL, "SPI_GetNumChannels");
    pSPI_GetChannelInfo = (FT_STATUS (*)(DWORD, FT_DEVICE_LIST_INFO_NODE*)) GetProcAddress(hDLL, "SPI_Get_ChammeÃ±Info");
    pSPI_OpenChannel = (FT_STATUS (*)(DWORD, FT_HANDLE*)) GetProcAddress(hDLL, "SPI_OpenChannel");
    pSPI_InitChannel = (FT_STATUS (*)(FT_HANDLE, ChannelConfig*)) GetProcAddress(hDLL, "SPI_InitChannel");
    pSPI_CloseChannel = (FT_STATUS (*)(FT_HANDLE)) GetProcAddress(hDLL, "SPI_CloseChannel");
    pSPI_Write = (FT_STATUS (*)(FT_HANDLE, UCHAR*, DWORD, LPDWORD, DWORD)) GetProcAddress(hDLL, "SPI_Write");
    pSPI_Read = (FT_STATUS (*)(FT_HANDLE, UCHAR*, DWORD, LPDWORD, DWORD)) GetProcAddress(hDLL, "SPI_Read");
    pCleanup_libMPSSE = (void(*)(void)) GetProcAddress(hDLL, "Cleanup_libMPSSE");
    
    Started = 0;
    FT_DEVICE_LIST_INFO_NODE devList;
    ChannelConfig channelConf;
    DWORD channel;
    DWORD channels;
    FT_STATUS status;
    channelConf.ClockRate = 1000000;
    channelConf.LatencyTimer = 1;
    channelConf.configOptions = SPI_CONFIG_OPTION_MODE0 | SPI_CONFIG_OPTION_CS_DBUS3 | SPI_CONFIG_OPTION_CS_ACTIVELOW;

    (*Init_libMPSSE)();

    status = (*SPI_GetNumChannels)(&channels);
    for (channel = 0; channel < channels; channel++)
    {
        status = (*SPI_GetChannelInfo)(channel, &devList);
        printf("SPI_GetNumChannels returned %d for channel %d\n", status, channel);
        /*print the dev info*/
        printf("        VID/PID: 0x%04x/0x%04x\n", devList.ID >> 16, devList.ID & 0xffff);
        printf("        SerialNumber: %s\n", devList.SerialNumber);
        printf("        Description: %s\n", devList.Description);
    }

    if (channels > 1)
    {
        // Open the the channel specified by the USE_MPSSE macro.
        // This must be defined to get this far.
        channel = 1;

        status = (*SPI_OpenChannel)(channel, &ftHandle);
        if (status != FT_OK)
        {
            fprintf(stderr, "Channel %d failed to open status %d\n", channel, status);
            exit(-2);
        }

        status = (*SPI_InitChannel)(ftHandle, &channelConf);
        if (status != FT_OK)
        {
            fprintf(stderr, "Channel %d failed to initialise SPI status %d\n", channel, status);
            exit(-3);
        }

        //Begins SPI data transfers
        status = spi_write(ftHandle, 0x6B, 0x80); //Resets device
        APP_CHECK_STATUS(status);

        status = spi_write(ftHandle, 0x6A, 0x10);
        APP_CHECK_STATUS(status);

        UCHAR temp;
        status = spi_read(ftHandle, WHO_AM_I, &temp);
        APP_CHECK_STATUS(status);
        printf("Who am I 0x%x\n", temp);

        // Write config Register for accelerometer
        status = spi_write(ftHandle, MPU9265_SETUP_ACC_SCALE, ACC_FULL_SCALE_16_G);
        APP_CHECK_STATUS(status);

        // Write config register for gyroscope
        status = spi_write(ftHandle, MPU9265_SETUP_GYRO_SCALE, GYRO_FULL_SCALE_2000_DPS);
        APP_CHECK_STATUS(status);

        Started = 1;
    }
/* %%%-SFUNWIZ_wrapper_Start_Changes_END --- EDIT HERE TO _BEGIN */
}
/*
 * Output function
 *
 */
void SPI_Thingy_Outputs_wrapper(real_T *y0)
{
/* %%%-SFUNWIZ_wrapper_Outputs_Changes_BEGIN --- EDIT HERE TO _END */
/* This sample sets the output equal to the input
      y0[0] = u0[0]; 
 For complex signals use: y0[0].re = u0[0].re; 
      y0[0].im = u0[0].im;
      y1[0].re = u1[0].re;
      y1[0].im = u1[0].im;
 */
    FT_STATUS status;

    if(Started == 1)
    {
        UCHAR Buf[14];
                
        for (int i = 0; i < 14; i++) {
            status = spi_read(ftHandle, (0x3B + i), &Buf[i]);
        }
        APP_CHECK_STATUS(status);
    
        // Convert accelerometer registers
        int16_t ax = Buf[0] << 8 | Buf[1];
        int16_t ay = Buf[2] << 8 | Buf[3];
        int16_t az = Buf[4] << 8 | Buf[5];
    
        int16_t temp = Buf[6] << 8 | Buf[7];
    
        // Convert gyroscope registers
        int16_t gx = Buf[8] << 8 | Buf[9];
        int16_t gy = Buf[10] << 8 | Buf[11];
        int16_t gz = Buf[12] << 8 | Buf[13];
        //printf("ax = %-6d, ay = %-6d, az = %-6d\tgx = %-6d, gy = %-6d, gz = %-6d\t t = %-6d\n", ax, ay, az, gx, gy, gz, temp);           
    }
/* %%%-SFUNWIZ_wrapper_Outputs_Changes_END --- EDIT HERE TO _BEGIN */
}

/*
 * Terminate function
 *
 */
void SPI_Thingy_Terminate_wrapper(void)
{
/* %%%-SFUNWIZ_wrapper_Terminate_Changes_BEGIN --- EDIT HERE TO _END */
/*
 * Custom Terminate code goes here.
 */
    FT_STATUS status;

    status = (*SPI_CloseChannel)(ftHandle);
    APP_CHECK_STATUS(status);
    (*Cleanup_libMPSSE)();
/* %%%-SFUNWIZ_wrapper_Terminate_Changes_END --- EDIT HERE TO _BEGIN */
}

